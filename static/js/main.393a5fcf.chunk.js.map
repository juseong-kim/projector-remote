{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ColorModeContext","React","createContext","toggleColorMode","App","inter","useState","done","setDone","theme","useTheme","colorMode","useContext","thingSpeak","key","setInterval","axios","get","then","response","data","clearInterval","console","log","Box","sx","width","height","bgcolor","color","display","justifyContent","alignItems","Grid","container","direction","rowSpacing","columnSpacing","xs","sm","md","marginTop","maxWidth","item","IconButton","onClick","Button","ml","textTransform","palette","mode","fontSize","CircularProgress","textAlign","ToggleColorMode","setMode","useMemo","prevMode","createTheme","Provider","value","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.393a5fcf.chunk.js","sourcesContent":["import './App.css'\nimport React, { useState } from 'react'\nimport { IconButton, Button, Grid } from '@mui/material'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport Box from '@mui/material/Box';\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew'\nimport HomeIcon from '@mui/icons-material/Home'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport RadioButtonCheckedIcon from '@mui/icons-material/RadioButtonChecked'\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft'\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport ReplayIcon from '@mui/icons-material/Replay'\nimport VolumeDownIcon from '@mui/icons-material/VolumeDown'\nimport VolumeOffIcon from '@mui/icons-material/VolumeOff'\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp'\nimport axios from 'axios'\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\n\nconst ColorModeContext = React.createContext({ toggleColorMode: () => { } });\n\nfunction App() {\n  var inter = 0;\n  const [done, setDone] = useState(1);\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n\n  function thingSpeak(key) {\n    if (done === 1) {\n      setDone(0);\n      inter = setInterval(function () {\n        // call API every second until success\n        axios.get(`https://api.thingspeak.com/update?api_key=2XA1TJQ0PXOTG9EL&field1=${key}`)\n          .then(response => {\n            if (response.data !== 0) {\n              clearInterval(inter);\n              setDone(1);\n              // resetTS();\n            }\n            console.log(`GET ${key}, Response: ${response.data}`)\n          }\n          )\n      }, 300);\n    }\n    // stop calls to API after 10 seconds\n    // setTimeout(function(){console.log('10 seconds elapsed'); clearInterval(inter);},10000);\n  }\n  return (\n    <div>\n      <Box\n        sx={{\n          width: '100%',\n          height: '100vh',\n          bgcolor: 'background.default',\n          color: 'text.primary',\n          display: 'flex',\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Grid container\n          direction=\"row\"\n          rowSpacing={4}\n          columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          marginTop=\"0\"\n          maxWidth=\"600px\"\n        >\n\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(1) }}>\n              <PowerSettingsNewIcon />\n            </IconButton>\n          </Grid>\n          <Grid item xs={4} />\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(2) }}>\n              <HomeIcon />\n            </IconButton>\n          </Grid>\n\n          <Grid item xs={4} />\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(3) }}>\n              <KeyboardArrowUpIcon />\n            </IconButton>\n          </Grid>\n          <Grid item xs={4} />\n\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(4) }}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(5) }}>\n              <RadioButtonCheckedIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(6) }}>\n              <ChevronRightIcon />\n            </IconButton>\n          </Grid>\n\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(7) }}>\n              <SettingsIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(8) }}>\n              <KeyboardArrowDownIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(9) }}>\n              <ReplayIcon />\n            </IconButton>\n          </Grid>\n\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(10) }}>\n              <VolumeDownIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(11) }}>\n              <VolumeOffIcon />\n            </IconButton>\n          </Grid>\n          <Grid container item justifyContent=\"center\" xs={4}>\n            <IconButton color=\"primary\" onClick={() => { thingSpeak(12) }}>\n              <VolumeUpIcon />\n            </IconButton>\n          </Grid>\n\n          <Grid item xs={12} />\n\n\n          <Grid container item justifyContent=\"center\" alignItems=\"center\" xs={8}>\n            <Button\n              sx={{\n                ml: 1,\n                textTransform: \"lowercase\",\n              }} onClick={colorMode.toggleColorMode} color=\"inherit\">\n              {theme.palette.mode} mode &nbsp; {theme.palette.mode === 'dark' ? <Brightness7Icon fontSize=\"small\" /> : <Brightness4Icon fontSize=\"small\" />}\n            </Button>\n          </Grid>\n          <Grid container item justifyContent=\"center\" alignItems=\"center\" xs={4}>\n            {done === 0 ? <CircularProgress fontSize=\"small\" /> : <CheckCircleOutlineIcon color=\"success\" />}\n          </Grid>\n\n          <Grid container item fontSize=\"0.7em\" justifyContent=\"center\" textAlign=\"center\" xs={12}>\n            Viewsonic M1 Mini+ Remote <br /><br /> Sincerely, Joe\n\n          </Grid>\n\n        </Grid>\n\n      </Box>\n    </div>\n  );\n}\n\nexport default function ToggleColorMode() {\n  const [mode, setMode] = React.useState('dark');\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode,\n        },\n      }),\n    [mode],\n  );\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}